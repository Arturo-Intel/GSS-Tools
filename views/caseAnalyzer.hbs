<div  class="loading"  >
    <canvas id="loading-container" width="200" height="200"></canvas>
    <div id="loading-text"> 
        <p id="loading-message">Asking AI to analyze this case...</p> 
    </div>
</div>
<div class="p-5">
    <h1>Case Analyzer</h1>
    <input  id="case-URL-input" style="width: 90%" placeholder="Type URL... ">
    <button id="apiCallButton">Submit</button>
    <div id="status"></div>

    <div id="case" class="analysis-report">
        <div class="flex-container">
            <div class="title-div">
                <dl>
                    <dt>Title</dt>
                    <dd id="case-title" class="title">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt</dd>
                    <dd><a id="case-url" target="_blank" href="">https://github.com/Arturo-Intel/GSS-Tools</a></dd>
                    <dd id="case-state" class="state">elit</dd>
                </dl>
            </div>
            <div  class="username-div">
                <dl>
                    <dt>Submitter</dt>
                    <dd id="case-username">Lorem ipsum</dd>
                </dl>
            </div>
        </div>
        <div>
            <dl>
                <dt>Summary</dt>
                <dd id="case-summary">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</dd>
            </dl>
        </div>

        <div id="details" class="flex-container">
            <div id="app" class="flex-child">
                <dl>
                    <dt>Game/Application Details</dt>
                    <dl class="description-list">
                        <dt>Name</dt><dd id="details-AppName">Lorem ipsum</dd>
                        <dt>Platform</dt><dd id="details-Platform">dolor sit</dd>
                        <dt>API</dt><dd id="details-API">amet</dd>
                    </dl>
                </dl>
            </div>
            <div id="pc" class="flex-child">
                <dl>
                    <dt>System Details</dt>
                    <dl class="description-list">
                        <dt>GPU</dt><dd id="details-GPU">consectetur</dd>
                        <dt>CPU</dt><dd id="details-CPU">adipiscing elit.</dd>
                        <dt>Driver Version</dt><dd id="details-Driver">Lorem ipsum </dd>
                        <dt>OS</dt><dd id="details-OS">dolor sit amet</dd>
                    </dl>
                </dl>
            </div>
        </div>

        <div class="flex-container">
            <div class="flex-child">
                <dl>
                    <dt>Main Pointers</dt>
                    <ul id="Main-Pointers"></ul>
                </dl>
            </div>
            <div class="flex-child">
                <dl>
                    <dt>Steps to reproduce</dt>
                    <ol id="step-repro"></ol>
                </dl>
            </div>
        </div>
        <div >
            <dl>
                <dt>Evidences</dt>
                <ul id="case-evidence"></ul>
            </dl>
        </div>
        <div >
            <dl>
                <dt>Possible questions to the submitter</dt>
                <ul id="case-questions"></ul>
            </dl>
        </div>
        SSU:
        <div><a id="ssu-path" target="_blank" href=""></a></div>
        <div id="ssu-analysis" style="height: 300px; overflow: scroll;"></div>
    </div>
</div>


<script src="/javascripts/loading-animation.js"></script>
<script>
    function getDateTime() {
        const date = new Date();
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');

        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    } 

    function millisecondsToHHMMSS(ms) {
        const seconds = Math.floor(ms / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);

        const formattedHours = String(hours).padStart(2, '0');
        const formattedMinutes = String(minutes % 60).padStart(2, '0');
        const formattedSeconds = String(seconds % 60).padStart(2, '0');

        return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
    }



    document.getElementById('case-URL-input').addEventListener("keypress", function(event) {
        if (event.key === "Enter" && !document.getElementById('apiCallButton').disabled) {
            event.preventDefault();
            document.getElementById("apiCallButton").click();
        }
    });
    document.getElementById("loading-text").style.display = "none";
    pause(); //animation
    document.getElementById("case").style.display = "none";

    document.getElementById('apiCallButton').addEventListener('click', async () => {
        var hitResult = "OK";
        const startTime = performance.now();
        var endTime = startTime;
        document.getElementById("apiCallButton").setAttribute("disabled", "disabled");
        document.getElementById('status').innerText = "";
        document.getElementById("case").style.display = "none";
        document.getElementById("ssu-path").textContent  = ""; 
        document.getElementById("ssu-path").href  = ""; 
        document.getElementById("loading-text").style.display = "block";
        play(); //animation
        var githubCase = false;
        var communitiesCase = false;

        const caseURL = document.getElementById('case-URL-input').value;


       
        if(caseURL.match(/^(https?:\/\/)?(www\.)?github\.com\/.+$/))
        {
            if(caseURL.match(/(\d+)$/))
            {
                githubCase = true;
                num = caseURL.match(/(\d+)$/)[0];
                
            } else {
                document.getElementById('status').innerText = "Incomplete Github URL\n";
                hitResult = "Incomplete Github URL";
                endTime = performance.now();
            }
        } 
        
        try {
            if(githubCase) {
                const url = 'https://api.github.com/repos/IGCIT/Intel-GPU-Community-Issue-Tracker-IGCIT/issues/';
                const caseRaw = await fetch(url+num);
                if(!caseRaw.ok){
                    document.getElementById('status').innerText = "Github case ["+ num + "] doesn\'t exist.";
                    hitResult="Github case ["+ num + "] doesn\'t exist.";
                    endTime = performance.now();
                } else {
                    const caseInfo = await caseRaw.json();
                    response = await fetch("/caseanalyzer/case", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify(caseInfo),
                    });
                    const data = await response.json();

                    if(data["case-error"]) {
                        document.getElementById('status').innerText = data["case-error"];
                        hitResult = data["case-error"];
                        endTime = performance.now();
                    } else {
                        document.getElementById("case").style.display = "block";
                        document.getElementById('case-title').innerText = data["case-analysis"].case_title; 
                        document.getElementById("case-url").href = caseInfo.html_url
                        document.getElementById("case-url").textContent = caseInfo.html_url
                        document.getElementById('case-state').innerText = caseInfo.state; 
                        document.getElementById('case-username').innerText = data["case-analysis"].username; 
                        document.getElementById('case-summary').innerText = data["case-analysis"].case_summary; 

                        document.getElementById('details-AppName').innerText = data["case-analysis"].app_name; 
                        document.getElementById('details-Platform').innerText = data["case-analysis"].platform; 
                        document.getElementById('details-API').innerText = data["case-analysis"].api;

                        document.getElementById('details-GPU').innerText = data["case-analysis"].gpu;
                        document.getElementById('details-CPU').innerText = data["case-analysis"].cpu;
                        document.getElementById('details-Driver').innerText = data["case-analysis"].driver_version
                        document.getElementById('details-OS').innerText = data["case-analysis"].os_version

                        document.getElementById('Main-Pointers').innerHTML = '';
                        document.getElementById('step-repro').innerHTML = '';
                        document.getElementById('case-evidence').innerHTML = '';
                        document.getElementById('ssu-analysis').innerText = '';
                        document.getElementById('case-questions').innerText = '';

                        data["case-analysis"].main_pointers.forEach(element => {
                            const li = document.createElement('li');
                            li.textContent = element;
                            document.getElementById('Main-Pointers').appendChild(li);
                        });

                        
                        data["case-analysis"].steps_reproduce.forEach(element => {
                            const li = document.createElement('li');
                            li.textContent = element;
                            document.getElementById('step-repro').appendChild(li);
                        });

                        if (data["case-analysis"].evidence.length > 0){
                            data["case-analysis"].evidence.forEach(element => {
                                const a = document.createElement('a');
                                a.href = element;
                                a.text = element;
                                a.target = "_blank";
                                const li = document.createElement('li');
                                li.appendChild(a);
                                document.getElementById('case-evidence').appendChild(li);
                            });
                        } else {
                            const li = document.createElement('li');
                            li.textContent = "No evidence links";
                            document.getElementById('case-evidence').appendChild(li);
                        }

                        data["case-analysis"].questions.forEach(element => {
                            const li = document.createElement('li');
                            li.textContent = element;
                            document.getElementById('case-questions').appendChild(li);
                        });

                        if(data["SSU-path"] == "null") {
                            document.getElementById("ssu-path").textContent = "SSU file not provided."
                        } else {
                            document.getElementById("ssu-path").textContent = data["SSU-path"]; 
                            document.getElementById("ssu-path").href  = data["SSU-path"];
                            document.getElementById('ssu-analysis').innerText = data["SSU-analysis"];
                        }
                    }
                }
            } else {
                document.getElementById('status').innerText += "Not a valid or supported URL"
                hitResult = "Not a valid or supported URL";
                endTime = performance.now();
            }

        } catch (error) {
            document.getElementById('status').innerText = error;
            hitResult=error; 
            endTime = performance.now();
        } 

        document.getElementById("loading-text").style.display = "none";
        document.getElementById("apiCallButton").removeAttribute("disabled");
        pause(); //animation
        endTime = performance.now();
        totaltime = endTime - startTime;
        console.log(">>>>" + millisecondsToHHMMSS(endTime - startTime));
        const saveHit = await fetch("/caseanalyzer/hit", {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json' // Set the content type to JSON
                },
                body: JSON.stringify({
                    "datetime": getDateTime(),
                    "action": "Case Analyzer: URL [" + caseURL + "]",
                    "result": hitResult,
                    "time": millisecondsToHHMMSS(endTime - startTime)
                }),
            });
        if (!saveHit.ok) {
            console.error("Could not save hit data", saveHit.status);
        } 
    });


</script>